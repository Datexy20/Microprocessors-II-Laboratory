#include "mcc_generated_files/mcc.h" //default library 


/*
 ADC_conversion_results() prototype function
 * 
 * - set your ADC channel , activate the ADC module , and get the ADC result to a value , then deactivate again the ADC module
 * - Set the appropriate Registers in the right sequence
 */

//++++++++++++++++++++++++++++++++++++++++++++++++++++++

#define LED_THRESHOLD 12
#define LED_ROLLOVER 1500

/*
 * Read Me -- Hans
 * Light-sensor/LED controller
 
 * <<led_counter>> holds an integer.  Every infinite loop iteration, led_counter will increment.
 * Once it is equal to LED_ROLLOVER (defined above), led_counter will be set to -1 and the adc conversion will begin.
 * While it is -1, check to see if conversion is done.  If so, set led_counter back to 0 and allow it to increment again, and update the led
 * This method, although complex, saves interrupts for more important things, and it saves clock cycles.
 
 */


/*
Develop your Application logic below
*/

void main(void)
{
    // Initialize PIC device
    SYSTEM_Initialize();
    
    int led_counter;
    led_counter = 0;

    // Initialize the required modules 
   
    // set up conversion parameters
    
	TRISAbits.TRISA0 = 0;			// TRISC bit0 is output
	TRISAbits.TRISA1 = 1;			// PORTC bit1 is input
	//ANSELAbits.ANSA1 = 1;				// bit 1 is analog input
    
    ADCON1 = 1;
    ADCON2 = 0;
    ADCON3 = 0;                     // set adc threshold reg to 0
    ADACT = 0;                      // disable adc auto conversion trigger (is this how????????????)
                                    // 5 already disabled, genius
    ADAOV = 0;                      // I hope this works?
    ADCAP = 0;                      // 7
    ADPRE = 0;                      // 8
    
    //ADCCS = 1;                      // 9 help!
    //ADCON2bits.ACQT     = 6;// 16 TAD
    //ADCON2bits.ADCS     =0b101;// use Fosc/16 for clock source
    
    // 10 references?
    //ADCON1bits.VCFG     =0b00;// set v+ reference to Vdd
    //ADCON1bits.VNCFG    =0b0;  // set v- reference to GND
    //ADCON1bits.CHSN     =0b000;// set negative input to GND
   // ADCON2bits.ADFM     =0b1;  // right justify the output
    
    ANSELAbits.ANSA1 = 1;           // 11
    
    // 12
    ADCON0bits.ADFM = 0;			// left justified alignment?
    // maybe ^ = ADCON0bits.ADFRM0 = 0???
    ADCON0bits.ADON = 1;                // adc enable
    ADCON0bits.ADCS = 0;                //  Clock supplied by FOSC, divided according to ADCLK register? (0) vs. Clock supplied from FRC dedicated oscillator
    ADCON0bits.ADCONT = 0;              // disable continuous operation
    
    /*ADREF Register
     
     Unimplemented: Read as ?0?
bit 4 ADNREF: ADC Negative Voltage Reference Selection bit
1 = VREF- is connected to VREF- pin
0 = VREF- is connected to AVSS
bit 3-2 Unimplemented: Read as ?0?
bit 1-0 ADPREF: ADC Positive Voltage Reference Selection bits
11 = VREF+ is connected to FVR_buffer 1
10 = VREF+ is connected to VREF+ pin
01 = Reserved
00 = VREF+ is connected to VDD
     
     */
    
    //ADCON0bits.ADON = 1;			// adc enabled
	//ADCON0bits.ADFM = 0;			// left justified
    
    
    
    /*This is pprobably gahbage
    ADCON1bits.VCFG     =0b00;// set v+ reference to Vdd
    ADCON1bits.VNCFG    =0b0;  // set v- reference to GND
    ADCON1bits.CHSN     =0b000;// set negative input to GND
    ADCON2bits.ADFM     =0b1;  // right justify the output
    ADCON2bits.ACQT     =0b110;// 16 TAD
    ADCON2bits.ADCS     =0b101;// use Fosc/16 for clock source
     * */
    /*CRAP ^^^*/

	
    // II think this is also a bunch of crap
	//analog channel select pins (AN#)
	//ADCON0 = ADCON0 | 00011100b; //(CHS2,CHS1,CHS0)
	//ADCON0bits.CHS1 = 0;
	//ADCON0bits.CHS0 = 1;
    
    LATAbits.LATA0 = 1;
    __delay_ms(2000);
    LATAbits.LATA0 = 0;
    
    
    ADCON0bits.GO = 1;
    while (ADCON0bits.GO != 0) {continue;}
    
    led_counter = ADRESH * 100;
    while (led_counter != 0) {
        LATAbits.LATA0 = 1;
        __delay_ms(200);
        LATAbits.LATA0 = 0;
        __delay_ms(500);
        led_counter--;
    }
    
    LATAbits.LATA0 = 1;
    __delay_ms(2000);
    LATAbits.LATA0 = 0;
    
    while (1) {continue;}
    
    return;
/*
    while (1) // keep your application in a loop
    {
        
        //START LED/LIGHT SENSOR PART
        if (led_counter < 0) {
            // adc conversion is running - check if done
            if (ADCON0bits.GO == 0) {
                // conversion = done
                
                // update led
                if (ADRESH >= LED_THRESHOLD) {
                    LATAbits.LATA0 = 0;
                } else {
                    LATAbits.LATA0 = 1;
                }
                
                led_counter = 0;        // start counter over again
            }   // else, just keep checking every iteration
        } else if (led_counter >= LED_ROLLOVER) {
            // it is time to start an adc conversion
            ADCON0bits.GO = 1;   // start conversion
            led_counter = -1;   // indicates that conversion is running
        } else {
            // neither so just update counter
            ++led_counter;
        }
        //END LED/LIGHT SENSOR PART
        
        
        
        
    }
    
    */
}
